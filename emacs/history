;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(ivy-history minibuffer-history-search-history shell-command-history read-from-kill-ring-history grep-find-history python-import-history git-commit-read-ident-history command-history flycheck-read-checker-history xref--read-identifier-history read-envvar-name-history read-number-history read-char-history buffer-name-history file-name-history minibuffer-history yes-or-no-p-history extended-command-history))
(setq ivy-history '(#("(3:34) 結束バンド - あのバンド [結束バンド]" 0 28 (ivy-index 0)) #("(1:58) Braxton Knight - BOCCHI THE ROCK! [BOCCHI THE ROCK!]" 0 59 (ivy-index 1)) "(1:48) Braxton Knight - Paradise Kiss [Paradise Kiss]" #("(3:35) Cigarettes After Sex - Sunsetz [Cigarettes After Sex]" 0 60 (ivy-index 0)) #("(4:19) Mr.Kitty - After Dark [Time]" 0 35 (ivy-index 0))))
(setq shell-command-history '("cat " "echo oi" "task ruff-lint" "t ruff-lint" "nano" "nano init.el" "ls" "pwd" "nano init.el" "pipes" "cowsay a" "cat keybindings.el" "cowsay a" "pipes" "poetry run task run" "poetry run task ruff-lint" "poetry run task lint" "task ruff-lint" "t ruff-lint" "poetry run task run" "cowsay oi" "poetry task run"))
(setq python-import-history '("Generator" "from typing import TypeVar" "from discord import Interaction" "from discord import app_commands" "from discord.ext.commands import Cog" "from discord.app_commands import CommandOnCooldown" "from typing import TypeVar" "from typing import Awaitable" "from typing import Callable" "from bot_imvu.core.client import MyClient" "from typing import Awaitable" "from asyncio import Future" "from typing import Optional" "from typing import Any" "Never" "from typing import Any" "from mercadopago import SDK" "from pydantic import Field" "from typing import Any" "import asyncio" "from typing import Any" "from typing import VarArg, KwArg, Coroutine" "from typing import Dict" "from typing import Awaitable" "from typing import Any" "from typing import TypeVar" "from typing import Awaitable" "from discord import InteractionType" "from typing import Callable" "from typing import Generator" "Generator" "from bot_imvu.core.client import MyClient" "from typing import override" "from bot_imvu.core.client import MyClient" "override" "from typing import Any" "from typing import Coroutine" "import aiofiles" "from typing import Any" "from discord.app_commands import MissingAnyRole" "aiofiles"))
(setq command-history '((ielm) (execute-extended-command nil "ielm" "iel") (keyfreq-show nil) (execute-extended-command nil "keyfreq-show" "keyfreq-s") (json-pretty-print-buffer nil) (execute-extended-command nil "json-pretty-print-buffer" "json") (execute-extended-command nil "json-pretty-print" "json") (keyfreq-json "~/Documents/a.json" t) (execute-extended-command nil "keyfreq-json" "keyfre") (keyfreq-autosave-mode 'toggle) (execute-extended-command nil "keyfreq-autosave-mode") (keyfreq-autosave-mode 'toggle) (execute-extended-command nil "keyfreq-autosave-mode" "keyfreq") (keyfreq-html "~/Documents/a.html" t) (execute-extended-command nil "keyfreq-html") (keyfreq-html "~/Documents/" t) (execute-extended-command nil "keyfreq-html") (keyfreq-html "~/*dashboard*" t) (execute-extended-command nil "keyfreq-html" "keyfr") (keyfreq-show nil) (execute-extended-command nil "keyfreq-show") (dashboard-open) (execute-extended-command nil "dashboard-open") (dashboard-open) (execute-extended-command nil "dashboard-open" "dasg") (/spotify-search-tr) (execute-extended-command nil "/spotify-search-tr") (/spotify-search-tr) (execute-extended-command nil "/spotify-search-tr" "/ sear") (/spotify-n) (execute-extended-command nil "/spotify-n" "/spo") (keyfreq-reset) (execute-extended-command nil "keyfreq-reset") (keyfreq-show nil) (execute-extended-command nil "keyfreq-show") (dashboard-open) (execute-extended-command nil "dashboard-open" "das") (keyfreq-show nil) (execute-extended-command nil "keyfreq-show") (keyfreq-reset) (execute-extended-command nil "keyfreq-reset") (keyfreq-show nil) (execute-extended-command nil "keyfreq-show" "keyu") (keyfreq-reset) (execute-extended-command nil "keyfreq-reset" "keyfr") (keyfreq-show nil) (execute-extended-command nil "keyfreq-show" "keyf") (execute-extended-command nil "xref-find-references") (xref-find-references "company-yasnippet") (execute-extended-command nil "xref-find-references" "x find refe") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (python-fix-imports) (execute-extended-command nil "python-fix-imports") (python-fix-imports) (execute-extended-command nil "python-fix-imports") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (python-fix-imports) (execute-extended-command nil "python-fix-imports") (python-fix-imports) (execute-extended-command nil "python-fix-imports") (python-import-symbol-at-point) (execute-extended-command nil "python-import-symbol-at-point") (python-import-symbol-at-point) (execute-extended-command nil "python-import-symbol-at-point") (python-import-symbol-at-point) (execute-extended-command nil "python-import-symbol-at-point" "impor py") (python-skeleton-import nil nil) (execute-extended-command nil "python-skeleton-import" "impor pyt") (python-fix-imports) (execute-extended-command nil "python-fix-imports" "import py") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all") (python-add-import nil) (execute-extended-command nil "python-add-import") (python-add-import nil) (execute-extended-command nil "python-add-import") (python-add-import nil) (execute-extended-command nil "python-add-import" "import") (yas-reload-all t t) (execute-extended-command nil "yas-reload-all")))
(setq flycheck-read-checker-history '("emacs-lisp" "python-mypy" "python-ruff" "python-flake8" "python-pylint" "python-ruff" "python-flake8" "python-pylint" "python-mypy" "python-pylint" "python-mypy" "python-flake8" "python-pylint" "python-mypy" "python-pylint" "python-flake8" "python-ruff"))
(setq xref--read-identifier-history '("company-yasnippet" "nerd-icons-mdicon" "check_is_paid" "mp" "rerun_on_login_fail" "HTTPClient" "last_posts" "last_6_post" "get_followers"))
(setq read-envvar-name-history '("PYTHONHOME"))
(setq read-number-history '("2"))
(setq buffer-name-history '("*Async Shell Command*" "*Async Shell Command*<2>" "*Async Shell Command*" "bot-imvu"))
(setq file-name-history '("~/.dotfiles/.config/emacs" "~/.config/kitty" "~/Documents/a.json" "~/Documents/a.html" "~/Documents/" "~/*dashboard*" "~/Documents/freelas/bot-imvu/bot_imvu/tasks.py" "~/.emacs.d/config/completion/" "~/.dotfiles/.config/.emacs.d/snippets/python-mode" "~/.dotfiles/.config/.emacs.d/snippets/my-snippet.yasnippet" "~/.dotfiles/.config/.emacs.d/snippets/" "~/Documents/freelas/bot-imvu/bot_imvu/tasks.py" "~/Documents/freelas/bot-imvu/bot_imvu/core/mercado_pago.py" "~/.dotfiles/.config/.emacs.d/config/aliases.el" "~/Documents/freelas/bot-imvu/bot_imvu/core/mercado_pago.py" "TAGS" "~/.dotfiles/.config/.emacs.d/config/misc.el" "~/.dotfiles/.config/.emacs.d/config/ui/icons.el" "~/.dotfiles/.config/.emacs.d/config/ui/theme.el" "~/.dotfiles/.config/.emacs.d/config/tools/git.el" "~/.dotfiles/.config/.emacs.d/config/ui/neotree.el" "~/.dotfiles/.config/.emacs.d/config/tools/" "~/.dotfiles/.config/.emacs.d/config/completion/auto-complete.el" "~/.dotfiles/.config/.emacs.d/config/programming/" "~/.dotfiles/.config/.emacs.d/config/core/" "~/.dotfiles/.config/.emacs.d/config/programming/" "~/.dotfiles/.config/.emacs.d/config/interface/" "~/.dotfiles/.config/.emacs.d/config/ui.el" "~/.dotfiles/.config/.emacs.d/config/#ui.el#" "~/.dotfiles/.config/.emacs.d/config/interface/" "~/.dotfiles/.config/.emacs.d/config/programming/" "~/.dotfiles/.config/.emacs.d/config/completion/" "~/.dotfiles/.config/.emacs.d/config/interface/" "~/.dotfiles/.config/.emacs.d/config/core/" "~/.dotfiles/.config/.emacs.d/config/auto-complete.el" "~/.dotfiles/.config/.emacs.d/config/completions.el" "~/.dotfiles/.config/.emacs.d/config/settings.el" "~/Documents/squarecloud/sdk-api-py/examples/upload_app/with_client.py" "~/.dotfiles/.config/.emacs.d/backup.el" "~/.dotfiles/.config/.emacs.d/config/functions.el" "~/.dotfiles/.config/.emacs.d/config/functions" "~/.dotfiles/.config/.emacs.d/functions.el" "~/.dotfiles/.config/.emacs.d/config/autocomplete.el" "~/.dotfiles/.config/.emacs.d/config/autocomplete" "~/.dotfiles/.config/.emacs.d/config/marginalia.el" "~/.dotfiles/.config/.emacs.d/config/packages.el" "~/.dotfiles/.config/emacs/config/keybindings.el" "~/.dotfiles/.config/emacs/config/keybings.el" "~/.dotfiles/.config/emacs/config/" "~/Documents/squarecloud/sdk-api-py/examples/upload_app/with_client.py" "~/Documents/squarecloud/sdk-api-py/squarecloud/logger" "~/Documents/squarecloud/sdk-api-py/examples/upload_app/with_client.py" "~/Documents/squarecloud/sdk-api-py/a.txt" "~/Documents/freelas/bot-imvu/bot_imvu/core/mercado_pago.py" "TAGS" "~/Documents/freelas/bot-imvu/bot_imvu/core/mercado_pago.py" "TAGS" "~/Documents/freelas/bot-imvu/bot_imvu/core/mercado_pago.py" "~/Documents/freelas/bot-imvu/bot_imvu/core/mercadopago.py" "~/Documents/freelas/bot-imvu/bot_imvu/core/mercado_pago.py" "~/Documents/freelas/bot-imvu/bot_imvu/core/mercadopago.py" "TAGS" "~/Documents/freelas/bot-imvu/teste.py" "TAGS" "~/Documents/freelas/bot-imvu/b.py" "~/Documents/freelas/bot-imvu/a.py" "~/Documents/freelas/bot-imvu/teste.py" "~/Documents/freelas/bot-imvu/bot_imvu/tasks.py" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/http_client.py" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/endpoints.py" "TAGS" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/http_client.py" "~/Documents/freelas/bot-imvu/ *NeoTree*" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/http_client.py" "~/Documents/freelas/bot-imvu/bot_imvu/data.py" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/__init__.py" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/http_client.py" "~/.config/kitty/kitty.conf" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/http_client.py" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/__init__.py" "~/Documents/freelas/bot-imvu/bot_imvu/wrapper/http_client.py" "~/Documents/freelas/bot-imvu/a.txt" "~/Documents/freelas/bot-imvu" "~/Documents/freelas/creators-hub/commands/" "~/Documents/freelas/creators-hub/main.py" "~/Documents/freelas/etpera/a.py" "~/Documents/freelas/bot-imvu/a.txt" "~/Documents/freelas/creators-hub/main.py" "~/Documents/freelas/tigrinho-bot/a.py~" "~/Documents/freelas/creators-hub/main.py" "~/.dotfiles/.config/emacs/init.el" "~/.emacs.d/init.el" "~/Documents/freelas/creators-hub/pyproject.toml" "~/Documents/freelas/creators-hub/a.py" "~/Documents/teste/main.py" "~/Documents/teste/requirements.txt" "~/Documents/teste/squarecloud.app" "~/Documents/freelas/creators-hub/utils.py" "~/.cache/pypoetry/virtualenvs/creators-hub-B4SnZD9G-py3.12/lib/python3.12/site-packages/PIL/ImageColor.py" "~/.cache/pypoetry/virtualenvs/creators-hub-B4SnZD9G-py3.12/lib/python3.12/site-packages/PIL/ImageDraw.py"))
(setq minibuffer-history '("... (choose a dir)" "a" "dis	" "yasnippet-snippets" "octicons" "nerd-icons-completion" "counsel-spotify" "avy" "~/Documents/freelas/bot-imvu/" "poetry run task run" "poetry run task ruff-lint" "poetry show" "~/Documents/freelas/bot-imvu/" "all-the-icons-dired" "all-the-icons-ivy" "all-the-icons" "all-the-icons-nerd-fonts" "all-the-icons-ivy" "git-commit" "use-package" "nerd-icons-mdicon" "yes" "mypy" "types-aiofiles" "task lint" "mypy@latest" "task lint" "Todo" "catppuccin" "aiofiles" "flycheck-checker-error-threshold" "save and then kill" "isort" "Cog" "Teste" "a" "teste" "pyflakes models.py" "rose-pine-moon" "task lint" "importlib-metadata" "flake8" "~/Documents/freelas/bot-imvu/" "~/Documents/freelas/creators-hub/" "... (choose a dir)" "~/Documents/freelas/creators-hub/" "~/Documents/freelas/etpera/" "~/Documents/freelas/bot-imvu/" "~/Documents/freelas/etpera/" "~/Documents/freelas/bot-imvu/" "a" "task lint" "isort              5.13.2   A Python utility / library to sort Python imports." "rose-pine-dawn" "rose-pine-color" "rose-pine-moon" "catppuccin" "task lint"))
(setq yes-or-no-p-history '("yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "	yes" "yes" "no" "yes"))
(setq extended-command-history '("ielm" "keyfreq-show" "json-pretty-print-buffer" "json-pretty-print" "keyfreq-json" "keyfreq-autosave-mode" "keyfreq-html" "keyfreq-show" "dashboard-open" "/spotify-search-tr" "/spotify-n" "keyfreq-reset" "keyfreq-show" "dashboard-open" "keyfreq-show" "keyfreq-reset" "keyfreq-show" "keyfreq-reset" "keyfreq-show" "xref-find-references" "yas-reload-all" "python-fix-imports" "yas-reload-all" "python-fix-imports" "python-import-symbol-at-point" "python-skeleton-import" "python-fix-imports" "yas-reload-all" "python-add-import" "yas-reload-all" "yas-new-snippet" "yas-reload-all" "yas-new-snippet" "yas-expand" "yas-reload-all" "package-install" "/spotify-play" "company-yasnippet" "company-yasnippet-or-completion" "company-yasnippet" "yas-insert-snippet" "yas-global-mode" "company-yasnippet" "web-mode-snippet-insert" "company-yasnippet" "yas-insert-snippet" "yas-reload-all" "python-mode" "yas-insert-snippet" "python-mode" "yas-insert-snippet" "dashboard-open" "yas-insert-snippet" "yas-reload-all" "yas-insert-snippet" "package-install" "package-upgrade-all" "/spotify-n" "/spotify-play" "completion-at-point" "package-install-selected-packages" "package-refresh-contents" "list-packages" "dashboard-open" "icon-mode" "company-mode" "package-refresh-contents" "/spotify-n" "/spotify-play" "counsel-spotify-search-tracks-by-artist" "auto-package-update-now-async" "counsel-spotify-search-track" "poetry-add-dev-dep" "savehist-mode" "counsel-spotify-search-track" "counsel-spotify-next" "counsel-spotify-play" "package-refresh-contents" "package-install" "package-reinstall" "buffer-menu" "shell-dynamic-complete-environment-variable" "shell-dynamic-complete-filename" "shell-dynamic-complete-command" "shell-command-on-region" "project-async-shell-command" "auto-package-update-now-async" "with-editor-async-shell-command" "shell-command-with-editor-mode" "with-editor-async-shell-command" "with-editor-shell-command" "shell" "kill-buffer" "async-shell-command" "eshell-command" "shell-command" "project-shell" "eshell-mode" "eshell" "shell"))
